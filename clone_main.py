import json
import os
import platform
import subprocess

from website_cloner.page_manager import fetch_all_pages
from website_cloner.folder_manager import FolderManager
from utils.embedding import Embedding
from config import BASE_DIR, FOLDER_STRUCTURE
from website_cloner.website_rule.haravan_rule import HaravanRule
from website_cloner.website_rule.sapo_rule import SapoRule


def main():

    auto_embedding = Embedding(BASE_DIR)
    auto_embedding.save_embeddings()
    # auto_embedding.delete_embeddings(['id_0', 'id_1'])
    # test = auto_embedding.get_embeddings()
    # print(test)
    #
    # print("\n=== Website Cloner Tool ===")
    #
    options = [
        'Crawl content c·ªßa web',
        'Fill code logic theo t·ª´ng trang',
    ]

    folder_url = ''
    while True:
        clear_screen()

        print("\n=== Website Cloner Tool ===")
        for i, option in enumerate(options):
            print(f"{i + 1}. {option}")

        menu_choice = input("\nNh·∫≠p s·ªë th·ª© t·ª± tr√™n menu ƒë·ªÉ thao t√°c (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ").strip()

        if menu_choice.lower() == "exit" or menu_choice == "":
            print("üëã Tho√°t ch∆∞∆°ng tr√¨nh!")
            break

        if not menu_choice.isdigit():
            print("L·ªói: Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!")
            continue

        menu_choice = int(menu_choice)

        if menu_choice == 1:
            # Create folder structure
            folder_manager = FolderManager(BASE_DIR)
            folder_path = folder_manager.create_main_folder()
            if folder_path:
                folder_url = folder_path
                # Create folder structure based on template
                template_structure = json.loads(FOLDER_STRUCTURE)
                folder_manager.create_childs_folder(folder_path, template_structure)

                print("\n=== Website Cloner Rules ===")
                website_rules = [
                    'L·∫•y website t·ª´ Haravan',
                    'L·∫•y website t·ª´ Sapo',
                    'N·∫øu ƒë√£ c√≥ s·∫µn th√¨ thao t√°c (ho·∫∑c "exit" ƒë·ªÉ tho√°t)'
                ]
                for i, option in enumerate(website_rules):
                    print(f"{i + 1}. {option}")

                while True:
                    menu_rule = input("\nNh·∫≠p s·ªë th·ª© t·ª± tr√™n menu ƒë·ªÉ thao t√°c (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ").strip()

                    if menu_rule.lower() == "exit" or menu_rule == "":
                        print("Quay l·∫°i menu ch√≠nh...")
                        break

                    if not menu_rule.isdigit():
                        print("L·ªói: Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!")
                        continue

                    menu_rule = int(menu_rule)
                    if menu_rule == 1:
                        haravan_rule = HaravanRule()
                        page_rules = haravan_rule.get_rules()
                    elif menu_rule == 2:
                        sapo_rule = SapoRule()
                        page_rules = sapo_rule.sapo_types
                    else:
                        print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i!")
                        continue

                    if page_rules:
                        # Get URL to crawl
                        url = input("Nh·∫≠p URL c·∫ßn crawl (vd: example.com): ").strip()

                        # Remove protocol if present for cleaner display
                        if url.startswith(('http://', 'https://')):
                            display_url = url.split('://', 1)[1]
                        else:
                            display_url = url

                        print(f"\nB·∫Øt ƒë·∫ßu crawl website: {display_url}")
                        print("Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t. Vui l√≤ng ƒë·ª£i...")

                        # Start crawling
                        fetch_all_pages(url, folder_path, page_rules)
                        #
                        # Show results
                        print("\n=== K·∫øt qu·∫£ crawl ===")
                        print(f"‚úÖ ƒê√£ crawl xong website: {display_url}")
                        print(f"‚úÖ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·∫°i: {folder_path}")

                        # Show template.json location
                        template_json_path = os.path.join(folder_path, "template.json")
                        if os.path.exists(template_json_path):
                            print(f"‚úÖ Th√¥ng tin template ƒë∆∞·ª£c l∆∞u t·∫°i: {template_json_path}")

                        print("\nH√£y ki·ªÉm tra n·ªôi dung c√°c file ƒë√£ crawl v√† ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn.")

                        break
        elif menu_choice == 2:
            from agents.base_agent import BaseAgent
            base_agent = BaseAgent(folder_url)
            base_agent.menu_agent()
            # if folder_url:
            #     from agents.base_agent import BaseAgent
            #     base_agent = BaseAgent(folder_url)
            #     base_agent.menu_agent()
            # else:
            #     print("L·ªói: Ch∆∞a crawl website n√†o. Vui l√≤ng ch·ªçn t√πy ch·ªçn 1 tr∆∞·ªõc!")
            break
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i!")

def clear_screen():
    """Clear the terminal screen based on the operating system."""
    if platform.system() == "Windows":
        subprocess.call('cls', shell=True)
    else:  # For Linux and MacOS
        subprocess.call('clear', shell=True)


if __name__ == "__main__":
    main()